---
layout: post
category : LeetCode
tagline: "二叉树的非递归遍历"
tags : [LeetCode,面试,遍历,前序中序后序,非递归]
---
{% include JB/setup %}

<h4>{{page.title|remove_first:'Leetcode之'}}</h4>

##前序
	public class Solution {
	    public List<Integer> preorderTraversal(TreeNode root) {
	        List<Integer> l = new ArrayList<Integer>();
	        TreeNode p = root;
	        TreeNode []stack = new TreeNode[1000];
	        int top =0;
	        if(root!=null)
	            stack[top++]=root;
	        while(top>0)
	        {
	            l.add(p.val);
				//先放右边 再放左边
	            if(p.right!=null)
	                stack[top++]=p.right;
	            if(p.left!=null)
	                stack[top++]=p.left;
	            p=stack[--top];
	        }
	        return l;
	    }
	}


##中序

	public class Solution {
	    public List<Integer> inorderTraversal(TreeNode root) {
	        List<Integer> re = new ArrayList<Integer>();
	        TreeNode stack[]=new TreeNode[1000];
	        int top=0;
	        TreeNode p = root;
	        while(top>0|| p!=null)  
	        {  
	            if(p!=null)  
	            {  
	                stack[top++]=p;
	                p= p.left;  
	            }else{  
	                p = stack[--top];  
	                re.add(p.val);  
	                p = p.right;  
	            }  
	        }  
	        return re;
	    }
	}

##后序


	public class Solution {
	    public List<Integer> postorderTraversal(TreeNode root) {
	       List<Integer> l = new ArrayList<Integer>();
	        TreeNode p = root;
	        TreeNode []stack = new TreeNode[1000];
	        int tail=0;
	        int top =0;
	        if(root!=null)
	            stack[top++]=root;
	        while(top>0)
	        {
	            /* 后序遍历可以看成右边再左边的前序遍历的结果的逆序。 */
	            l.add(0,p.val);
	            if(p.left!=null)
	                stack[top++]=p.left;
	            if(p.right!=null)
	                 stack[top++]=p.right;
	            p=stack[--top];
	        }
	        return l;
	    }
	}